k8s {
 namespace = 'medgen-ns'
 runAsUser = 1000
 storageClaimName = 'pvc-beegfs'
 homeDir = "/storage2/nanopore_ps"
 launchDir = "${k8s.homeDir}/launch"
 projectDir = "${k8s.homeDir}/project"
 workDir = "${k8s.homeDir}/temp"
 pullPolicy = 'IfNotPresent'
 cpuLimits = true
 storageMountPath = '/storage2'
 pod = [ [volumeClaim: 'pvc-medgen-plevova', mountPath: "/mnt" ]]
}
//homeDir = "/mnt/01.NanoBreak/src"
//useJobs = true
//computeResourceType = 'Job'

params {
 outDir = '/mnt/01.NanoBreak/data/samples'
 projectDirectory = "${k8s.projectDir}/xsvato01/nanopore_k8s/"

 //scripts
 ComputeDistance = "${k8s.projectDir}/xsvato01/nanopore_k8s/bin/ComputeDistance.py"
 TagUniqes =  "${k8s.projectDir}/xsvato01/nanopore_k8s/bin/TagUnique.py"
 Circos =  "${k8s.projectDir}/xsvato01/nanopore_k8s/bin/circos.R"
 CnvPlotTobias = "${k8s.projectDir}/xsvato01/nanopore_k8s/bin/rd.R"
 CnvPlotTobias_T2T = "${k8s.projectDir}/xsvato01/nanopore_k8s/bin/T2T/rd.R"
 FilterSingletons = "${k8s.projectDir}/xsvato01/nanopore_k8s/bin/filterSingletons.py"
 ParseSurvivor = "${k8s.projectDir}/xsvato01/nanopore_k8s/bin/ParseSurvivor.py"
 SurvivorPutSuppToSamples = "${k8s.projectDir}/xsvato01/nanopore_k8s/bin/SurvivorPutSuppToSamples.py"
 ExploadBNDs = "${k8s.projectDir}/xsvato01/nanopore_k8s/bin/exploadBNDs.py"
 FilterSingletonsSurvivor = "${k8s.projectDir}/xsvato01/nanopore_k8s/bin/filterSingletonsSurvivor.py"
 Edit1kONT = "${k8s.projectDir}/xsvato01/nanopore_k8s/bin/Edit1kONT.py"
 FilterGeneBreaks = "${k8s.projectDir}/xsvato01/nanopore_k8s/bin/FilterGeneBreaks.py"


 ref_specific = [
  [
    refname:'GrCh38',
    ref:'/mnt/shared_resources/homo_sapiens/GRCh38/seq/GRCh38.fa',
    vep:'/mnt/shared_resources/homo_sapiens/GRCh38/annot/r110/vep' ,
    refFlat: "${k8s.projectDir}/xsvato01/nanopore_k8s/bin/GrCh38/GrCh38.refFlat.noChr.txt",
    refLengths : "${k8s.projectDir}/xsvato01/nanopore_k8s/bin/GrCh38/GrCh38.lens.txt", 
    cytoMap :  "${k8s.projectDir}/xsvato01/nanopore_k8s/bin/GrCh38/GrCh38.cytoMap.bed",
    CNVdb : "${k8s.projectDir}/xsvato01/nanopore_k8s/bin/GrCh38/GrCh38.cnvDB.bed",
    nonMappableRepeats: "${k8s.projectDir}/xsvato01/nanopore_k8s/bin/GrCh38/GrCh38.nonMappable.repeatsTrf.bed",
    nonMappableRepeatsTobias: "${k8s.projectDir}/xsvato01/nanopore_k8s/bin/GrCh38/dna.primary_assembly.fa.r101.s501.NoCHR.blacklist.gz",
    alfredAnnotateBed: "${k8s.projectDir}/xsvato01/nanopore_k8s/bin/GrCh38/Homo_sapiens.GRCh38.107.gtf.gz"
  ],
  [
    refname: 'GrCh37',
    ref:'/mnt/shared_resources/homo_sapiens/GRCh37/seq/GRCh37.fa',

    vep : 'NENI',
    refFlat : "${k8s.projectDir}/xsvato01/nanopore_k8s/bin/GrCh37/GrCh37.refFlat.noChr.txt",
    refLengths :  "${k8s.projectDir}/xsvato01/nanopore_k8s/bin/GrCh37/GrCh37.lens.txt",
    cytoMap : "${k8s.projectDir}/xsvato01/nanopore_k8s/bin/GrCh37/GrCh37.cytoMap.bed",
    CNVdb : "${k8s.projectDir}/xsvato01/nanopore_k8s/bin/GrCh37/GrCh37.cnvDB.bed",
    nonMappableRepeats : "${k8s.projectDir}/xsvato01/nanopore_k8s/bin/GrCh37/GrCh37.nonMappable.repeatsTrf.bed"
  ],
  [
    refname: 'T2T',
    ref:'/mnt/shared_resources/homo_sapiens/T2T/chm13v2.0_maskedY.fa',
    nonMappableRepeatsTobias: '/mnt/shared_resources/homo_sapiens/T2T/map_tr/T2T-CHM13v1.1.fa.r101.s501'
  ]
 ]
}


executor {
   queueSize = 100
}

process {
 shell = ['/bin/bash', '-euo', 'pipefail']
 container = 'registry.gitlab.ics.muni.cz:443/450402/nanopore_k8s:65'
 scratch = true
 executor = 'k8s'
 pod = [[securityContext:[fsGroupChangePolicy:'OnRootMismatch', runAsUser:1000, runAsGroup:1, fsGroup:1]], [nodeSelector:'storage=local-ssd']]
//  errorStrategy = { task.exitStatus in [143,137,104,134,139,247, null, ''] ? 'retry' : 'finish' }
 errorStrategy = { task.exitStatus in [1] ?  'finish' : 'retry' }


 cpus = 1
 memory = '1GB'
   withLabel: s_mem {
      memory = {1.GB * task.attempt * (3/4)}
   }
   withLabel: m_mem {
      memory = {4.GB * task.attempt * (3/4)}
   }
   withLabel: l_mem {
      memory = {12.GB * task.attempt * (3/4)}
   }     
   withLabel: xl_mem {
      memory = {24.GB * task.attempt * (3/4)}
   }
   withLabel: xxl_mem {
      memory = {48.GB * task.attempt * (3/4)}
   }
   withLabel: xxxl_mem {
      memory = {120.GB * task.attempt * (3/4)}
   }
   withLabel: s_cpu {
      cpus = 1
   }
   withLabel: m_cpu {
      cpus = 4
   }
   withLabel: l_cpu {
      cpus = 8
   }
   withLabel: xl_cpu {
      cpus = 16
   }
}

manifest {
 defaultBranch = 'new_features'
}